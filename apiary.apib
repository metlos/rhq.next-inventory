FORMAT: 1A

# RHQ.next Inventory
This is a draft of the REST API of inventory in RHQ.next.

## Feed [/feeds/{id}]

+ Model (application/json)

        {
            "id" : "1234-abcd",
            "capabilities" : ["identity", "resources", "discovery", 
                              "monitor", "operations", "configuration"]
        }

+ Parameters

    + id (required, string) ... the assigned ID of the feed.

### Get a single feed [GET]

+ Response 200

    [Feed][]

### Delete the feed from RHQ along with everything it defines [DELETE]
+ Response 204

## Feeds [/feeds]
Feed registration, etc.

### Registration [POST]
This is where the feeds register themselves.

+ Request (application/json)

        {
            "id" : "suggested-unique-id", //this might or might not be 
                                          //accepted by the rhq server
            "capabilities" : ["identity", "resources", "discovery", 
                              "monitor", "operations", "configuration"]    
        }

+ Response 201

    [Feed][]

### Feeds Collection [GET]
Returns all feeds that rhq knows of.

+ Response 200 (application/json)

        [
            { 
                "id" : "1234-abcd",
                "capabilities" : ["identity", "resources", "discovery", 
                                  "monitor", "operations", "configuration"]
            }
        ]


## Discovery [/discovery]
Receiving discovery reports. Note that this step is completely voluntary
in the feed workflow and will be only performed by feeds capable of 
discovery.

### Send discovery report [POST]
Sends the discovery report up to the server. The example request contains
an example resource object for some of the possible feed types (rhq agent, 
collectd proxy, kubernetes proxy).

The `dataDefs` list the ids (and optionally types) of the data that 
the resources are supposed to contain.

+ Request (application/json)

        [
            { //RHQ agent
                "address" : "rhq://1234-abcd/PLATFORM/cpu1",
                "name" : "CPU1",
                "description" : "kachny",
                "version" : null,
                "dataDefs" : [
                    {
                        "id" : "rhq://1234-abcd/PLATFORM/cpu1/systemLoad",
                        "type" : "rhq-type://platforms/CPU/systemLoad"
                    }, 
                    {
                        "id" : "rhq://1234-abcd/PLATFORM/cpu1/userLoad",
                        "type" : "rhq-type://platforms/CPU/userLoad"
                    }
                ]
            },
            { //Collectd Proxy - Collectd can either use the "true" hostname 
              //as its host part of the identifier or it can be configured 
              //to use a specific value for host.
              //We can just use this value, because it is supposed to be 
              //unique in the environment.
              //Notice how collectd datum identifier is used to extract the
              //agentID, resourceAddress and also resource name.
              //
              //The identifier has this form ([] denotes optional parts):
              //host/plugin[-pluginInstance]/type[-typeInstance]
              //we use this mapping:
              //host = agentID
              //plugin[-pluginInstance] = resourceAddress and name 
              //(collectd "resources" are not hierarchical). 
              //
              //the type[-typeInstance] is not used for resource 
              //identification because it is meant to identify the measured
              //thing inside something that is designated by the 
              //plugin[-pluginInstance] identifier.
              //
              //The type identifier is composed as follows:
              //collectd-type://plugin/type-typeInstance
              
                "address" : "collectd://hostX/cpu-0",
                "name" : "cpu-0",
                "description" : null,
                "version" : null,
                "dataDefs" : [
                    {
                        "id" : "collectd://hostX/cpu-0/cpu-user",
                        "type" : "collectd-type://cpu/cpu-user"
                    },
                    {
                        "id" : "collectd://hostX/cpu-0/cpu-idle",
                        "type" : "collectd-type://cpu/cpu-idle"
                    }
                ]
            },
            { //Kubernetes Proxy
                "address" : "kubernetes://1234-abcd/pod/pod1",
                "name" : "pod1",
                "dataDefs" : [
                    {
                        "id" : "cadvisor://1234-abcd/pod/pod1/metric",
                        "type" : "cadvisor-type://..."
                    }
                ]
            },
            { //Feed that doesn't understand resources, but somehow knows 
              //the data types of the stuff it sends up. If it didn't know 
              //even that - it can merely start pushing data and RHQ will 
              //analyze it, represent it somehow in discovery queue (and 
              //drop it, because the resource would not be in the 
              //inventory).
                "dataDefs" : [
                    {
                        "id" : "in-app-metric1",
                        "type" : "custom-type:acme-property"
                    },
                ]
            }
        ]
        
+ Response 201

## Resource [/resources{?id,address}]
Work with resources.

+ Model (application/json)

        {
            "id" : "9876-zyxw",
            "name" : "cpu0",
            "description" : null,
            "version" : null,
            "address" : "rhq://1234-abcd/PLATFORM/cpu0"
            "metrics" : [
                {
                    "id" : "collectd://hostX/cpu-0/cpu-load",
                    "type" : "collectd-type://cpu/cpu-load"
                }
            ],
            "connection" : {
                "username" : "kachnak",
                "password" : "clear-text-ftw"
            },
            "connectionType" : "custom-type://username-and-password",
            "configuration" : {
                "frequency" : "100"
            },
            "configurationType" : 
                "rhq-type://platforms/CPU/resourceConfiguration",
            "operations" : [
                {
                    "id" : "rhq://1234-abcd/PLATFORM/cpu0/overclock",
                    "type" : "rhq-type://platforms/CPU/overclock"
                }
            ]
        }

### Get a single resource [GET]
+ Parameters
    + id (optional, uuid, `123`) ... 
        Resources are server side concept, so they have a server-side ID.
        Either id or address is required to get a resource.
    + address (optional, string, `rhq://agentX/PLATFORM/cpu1`) ...
        The address of the resource in the agent-specific format.
        Either id or address is required to get a resource.

+ Response 200 (application/json)

    [Resource][]
    
### Create a new resource [POST]
This is going to create a new "synthetic" resource. This resource was not 
suggested by any agent. It is created by the user of the API.

Because the individual datapoints coming from the agent are addressable, we 
can compose it from them.

+ Request (application/json)

        {
            "name" : "custom-cpu",
            "description" : "my own CPU resource",
            "metrics" : [
                {
                    "id" : "collectd://hostX/cpu-0/cpu-load",
                    "type" : "collectd-type://cpu/cpu-load"
                }
            ],
            "connection" : {
                "username" : "kachnak",
                "password" : "clear-text-ftw"
            },
            "connectionType" : "custom-type://username-and-password",
            "configuration" : {
                "frequency" : "100"
            },
            "configurationType" : 
                "rhq-type://platforms/CPU/resourceConfiguration",
            "operations" : [
                {
                    "id" : "rhq://1234-abcd/PLATFORM/cpu0/overclock",
                    "type" : "rhq-type://platforms/CPU/overclock"
                }
            ]
        }
+ Response 201 (application/json)

    [Resource][]
    
## Data [/data]
Work with individual data points.

### Add a data point [POST]
+ Request
 
        []

+ Response 201 (application/json)

        [Resource][]

## Type [/types]
Work with resource and data types.

## Query [/query]
The querying interface.

