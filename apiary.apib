FORMAT: 1A

# RHQ.next Inventory
This is a draft of the REST API of inventory in RHQ.next.

## Feed [/feeds/{id}]

+ Model (application/json)

        {
            "id" : "1234-abcd",
            "capabilities" : ["identity", "resources", "discovery", "monitor", "operations", "configuration", ...]
        }

+ Parameters
        
    + id (required, string) ... the assigned ID of the feed.

### Get a single feed [GET]

+ Response 200
    
    [Feed][]

### Delete the feed from RHQ along with everything it defines [DELETE]
+ Response 204

## Feeds [/feeds]
Feed registration, etc.

### Registration [POST]
This is where the feeds register themselves.

+ Request (application/json)
        
        {
            "id" : "suggested-unique-id", //this might or might not be accepted by the rhq server
            "capabilities" : ["identity", "resources", "discovery", "monitor", "operations", "configuration"]    
        }

+ Response 201
        
    [Feed][]

### Feeds Collection [GET]
Returns all feeds that rhq knows of.

+ Response 200 (application/json)
    
        [
            { 
                "id" : "1234-abcd",
                "capabilities" : ["identity", "resources", "discovery", "monitor", "operations", "configuration", ...]
            }
        ]


## Discovery [/discovery]
Receiving discovery reports. Note that this step is completely voluntary in the feed workflow and will be only performed by 
feeds capable of discovery.

### Send discovery report [POST]
Sends the discovery report up to the server. The example request contains an example resource object for some of the
possible feed types (rhq agent, collectd proxy, kubernetes proxy).

The `dataDefs` list the ids (and optionally types) of the data that the resources are supposed to contain.

+ Request (application/json)

        [
            { //RHQ agent
                "address" : "rhq://1234-abcd/PLATFORM/cpu1",
                "name" : "CPU1",
                "description" : "kachny",
                "version" : null,
                "dataDefs" : [
                    {
                        "id" : "rhq://1234-abcd/PLATFORM/cpu1/systemLoad",
                        "type" : "rhq-type://platforms/CPU/systemLoad"
                    }, 
                    {
                        "id" : "rhq://1234-abcd/PLATFORM/cpu1/userLoad",
                        "type" : "rhq-type://platforms/CPU/userLoad"
                    }
                ]
            },
            { //Collectd Proxy - notice the lack of agentID in the address - this needs to be resolved by hierarchy resolvers
              //in another words, the address and the dataDefs ids are not final at the discovery time.
                "address" : "collectd://localhost.cpu.cpu1",
                "name" : "cpu1", //extracted from the collectd identifier of some metric received,
                "description" : null,
                "version" : null,
                "dataDefs" : [
                    {
                        "id" : "collectd://localhost.cpu.cpu1.load",
                        "type" : "collectd-type://cpu/load"
                    },
                    {
                        "id" : "collectd://localhost.cpu.cpu1.wait",
                        "type" : "collectd-type://cpu/wait"
                    }
                ]
            },
            { //Kubernetes Proxy
                "address" : "kubernetes://1234-abcd/pod/pod1",
                "name" : "pod1",
                "dataDefs" : [
                    {
                        "id" : "cadvisor://1234-abcd/pod/pod1/metric",
                        "type" : "cadvisor-type://..."
                    }
                ]
            },
            { //Feed that doesn't understand resources, but somehow knows the data types of the stuff it sends up.
              //If it didn't know even that - it can merely start pushing data and RHQ will analyze it, represent it
              //somehow in discovery queue (and drop it, because the resource would not be in the inventory).
                "dataDefs" : [
                    {
                        "id" : "in-app-metric1",
                        "type" : "custom-type:acme-property"
                    },
                ]
            }
        ]
        
+ Response 201

## Resource [/resources{?id,address}]
Work with resources.

+ Model (application/json)

        {
            "id" : "2132-232-dakjhfd-",
            "address" : "rhq://agentX/PLATFORM/cpu1"
            "metrics" : [
                {
                    "id" : "collectd://agentX/localhost.cpu.cpu1.load",
                    "definition" : "/data/
                }
            ],
            "connection" : {},
            "configuration" : {},
            "operations" : []
        }

### Get a single resource [GET]
+ Parameters
    + id (optional, uuid, `123`) ... 
        Resources are server side concept, so they have a server-side ID.
        Either ID or address is required to get a resource.
    + address (optional, string, `rhq://agentX/PLATFORM/cpu1`) ...
        The address of the resource in the agent-specific format. This will
+ Response 200 (application/json)

## Data [/data]
Work with individual data points.

### Add a data point [POST]
+ Request (application/json)
 
        []

+ Response 201 (application/json)

        []

## Type [/types]
Work with resource and data types.

## Query [/query]
The querying interface.

